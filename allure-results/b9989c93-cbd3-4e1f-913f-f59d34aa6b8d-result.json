{"name": "test_change_pin1_forget_pin[suspeeeend106]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Device 3200b0985ea0b513 was not in the list of connected devices\nStacktrace:\nUnknownError: An unknown server-side error occurred while processing the command. Original error: Device 3200b0985ea0b513 was not in the list of connected devices\n    at getResponseForW3CError (C:\\Users\\a.jamshidi\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\@appium\\base-driver\\lib\\protocol\\errors.js:1145:9)\n    at asyncHandler (C:\\Users\\a.jamshidi\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\@appium\\base-driver\\lib\\protocol\\protocol.js:485:57)", "trace": "request = <SubRequest 'login_and_dashboard' for <Function test_change_pin1_forget_pin[suspeeeend106]>>\n\n    @pytest.fixture\n    def login_and_dashboard(request):\n        from pages.login_page import LoginPage\n        device_name = request.config.getoption(\"--device_name\")\n        options = AppiumOptions()\n        options.load_capabilities(device_configs[device_name])\n    \n        service = AppiumService()\n        service.start()\n        #\n        # # دریافت username از پارامتر درخواست (در صورت وجود)\n        # username = request.param if hasattr(request, \"param\") else \"andpfm7\"\n    \n        if isinstance(request.param, dict):\n            username = request.param.get(\"username\")\n            password_key = request.param.get(\"password_key\", \"pass1\")\n        else:\n            username = request.param  # برای سازگاری با تست‌های موجود\n            password_key = \"pass1\"\n    \n            # بارگیری اطلاعات حساب‌ها\n        accounts = load_accounts()\n    \n        # بررسی وجود نام کاربری در فایل\n        if username not in accounts:\n            raise ValueError(f\"Username '{username}' not found in accounts.json!\")\n    \n        # دریافت پسورد\n        password = accounts[username].get(password_key)\n        if not password:\n            raise ValueError(f\"Password key '{password_key}' not found for user '{username}'!\")\n    \n        appium_url = \"http://127.0.0.1:4723\"\n>       driver = webdriver.Remote(appium_url, options=options)\n\nconftest.py:123: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\android_automation\\android_automation\\.venv\\lib\\site-packages\\appium\\webdriver\\webdriver.py:229: in __init__\n    super().__init__(\n..\\..\\android_automation\\android_automation\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:212: in __init__\n    self.start_session(capabilities)\n..\\..\\android_automation\\android_automation\\.venv\\lib\\site-packages\\appium\\webdriver\\webdriver.py:319: in start_session\n    response = self.execute(RemoteCommand.NEW_SESSION, w3c_caps)\n..\\..\\android_automation\\android_automation\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F1CBFB2790>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"An unknown server-side error occurred while pro...\\npm\\\\\\\\node_modules\\\\\\\\appium\\\\\\\\node_modules\\\\\\\\@appium\\\\\\\\base-driver\\\\\\\\lib\\\\\\\\protocol\\\\\\\\protocol.js:485:57)\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Device 3200b0985ea0b513 was not in the list of connected devices\nE       Stacktrace:\nE       UnknownError: An unknown server-side error occurred while processing the command. Original error: Device 3200b0985ea0b513 was not in the list of connected devices\nE           at getResponseForW3CError (C:\\Users\\a.jamshidi\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\@appium\\base-driver\\lib\\protocol\\errors.js:1145:9)\nE           at asyncHandler (C:\\Users\\a.jamshidi\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\@appium\\base-driver\\lib\\protocol\\protocol.js:485:57)\n\n..\\..\\android_automation\\android_automation\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException"}, "parameters": [{"name": "login_and_dashboard", "value": "'suspeeeend106'"}], "start": 1740214152312, "stop": 1740214152312, "uuid": "5e6e78aa-bac1-49d5-8011-a9aa3cd0f0ef", "historyId": "11c5f564e7c4d582d6422b86a68d2daa", "testCaseId": "fe6f7cbd8dfe705572ac9a0fa8f30ab9", "fullName": "tests.card.test_change_pin1_forget_pin#test_change_pin1_forget_pin", "labels": [{"name": "subSuite", "value": "Tests for Resetting First Password (PIN1)"}, {"name": "story", "value": "Allow users to reset their first password (PIN1)"}, {"name": "severity", "value": "critical"}, {"name": "feature", "value": "Forgot First Password (PIN1)"}, {"name": "epic", "value": "Card Management"}, {"name": "suite", "value": "Version:v3.5.0"}, {"name": "parentSuite", "value": "tests.card"}, {"name": "host", "value": "ajamshidi-lap-qa"}, {"name": "thread", "value": "287400-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.card.test_change_pin1_forget_pin"}], "links": [{"type": "link", "url": "https://jira.sdb247.com/secure/enav/#/5686?query=issue%3DQA-22654&offset=1&pageWidth=10&view=detail", "name": "Jira Task"}]}